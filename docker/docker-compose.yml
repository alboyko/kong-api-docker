version: '3.7'

services:
  db:
    container_name: postgres
    build:
      context: .
      dockerfile: db/dockerfile-postgres
    environment:
      DB_CONF: >
        ${KONG_DB_NAME}:${KONG_DB_USERNAME}:${KONG_DB_PASSWORD},
        ${KONGA_DB_NAME}:${KONGA_DB_USERNAME}:${KONGA_DB_PASSWORD},
        ${KEYCLOAK_DB_NAME}:${KEYCLOAK_DB_USERNAME}:${KEYCLOAK_DB_PASSWORD}

      POSTGRES_USER: ${POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${POSTGRES_DB_PASSWORD}
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres-net
      - kong-net
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    build:
      context: .
      dockerfile: db/dockerfile-pgadmin
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-no-reply@noreply.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-6060}:80"
    networks:
      - postgres-net
      - kong-net
    restart: unless-stopped

  kong-migrations:
    container_name: kong-migration
    image: kong/kong-gateway
    depends_on:
      - db
    entrypoint: sh -c "sleep 10 && kong migrations bootstrap -v"
    environment:
# KONG_PASSWORD must be the first env var as it triggers creation of "kong_admin"
      KONG_PASSWORD: ${KONG_ADMIN_PASSW}
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${POSTGRES_DB_HOST}
      KONG_PG_DATABASE: ${KONG_DB_NAME}
      KONG_PG_USER: ${KONG_DB_USERNAME}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
    networks:
      - kong-net
    restart: on-failure

  kong:
    container_name: ${KONG_CONTAINER_NAME}
    image: kong/kong-gateway
    depends_on:
      - kong-migrations
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${POSTGRES_DB_HOST}
      KONG_PG_DATABASE: ${KONG_DB_NAME}
      KONG_PG_USER: ${KONG_DB_USERNAME}
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PROXY_ACCESS_LOG: ${KONG_PROXY_ACCESS_LOG}
      KONG_ADMIN_ACCESS_LOG: ${KONG_ADMIN_ACCESS_LOG}
      KONG_PROXY_ERROR_LOG: ${KONG_PROXY_ERROR_LOG}
      KONG_ADMIN_ERROR_LOG: ${KONG_ADMIN_ERROR_LOG}
      # is not activated without license. see: https://github.com/Kong/kong/issues/7610
      KONG_ENFORCE_RBAC: "on"
      KONG_ADMIN_GUI_AUTH: basic-auth
      KONG_ADMIN_GUI_SESSION_CONF: "{\"secret\":\"secret-string\"}"
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN}
      KONG_PORTAL: ${KONG_PORTAL}
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA}
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"
    networks:
      - kong-net
    restart: on-failure

  keycloak:
    container_name: keycloak
    build:
      context: .
      dockerfile: keycloak/dockerfile-keycloak
    depends_on:
      - db
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: ${POSTGRES_DB_HOST}
      DB_DATABASE: ${KEYCLOAK_DB_NAME}
      DB_USER: ${KEYCLOAK_DB_USERNAME}
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      DB_SCHEMA: public
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
      KEYCLOAK_HOSTNAME: keycloak
      KEYCLOAK_FRONTEND_URL: http://${DOCKER_HOST_IP}:7070/auth
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    ports:
      - "7070:8080"
    networks:
      - kong-net
    volumes:
      - ${KEYCLOAK_VOLUME_PATH}:/mnt/keycloak/
    restart: on-failure

  wiremock:
    container_name: wiremock
    build:
      context: .
      dockerfile: wiremock/dockerfile-wiremock
    ports:
      - "5050:8080"
      - "5443:8443"
    networks:
      - kong-net
    restart: on-failure

  deck:
    container_name: deck
    build:
      context: .
      dockerfile: deck/dockerfile-deck
    user: root
    environment:
      DECK_KONG_ADDR: http://${KONG_CONTAINER_NAME}:${KONG_PROXY_ADMIN_API_PORT}
      DECK_HEADERS: ${DECK_HEADERS}
      no_proxy: ${KONG_CONTAINER_NAME},127.0.0.1/8
      NO_PROXY: ${KONG_CONTAINER_NAME},127.0.0.1/8
    depends_on:
      - kong
#    entrypoint: sleep 3600
#    entrypoint: deck ping
#    entrypoint: deck dump -o /mnt/deck/internal/kong.yaml -w internal-api --yes
#    entrypoint: deck dump -o /mnt/deck/public/kong.yaml -w public-api --yes
#    entrypoint: deck sync -s /mnt/deck/internal/kong.yaml
#    entrypoint: deck sync -s /mnt/deck/public/kong.yaml
    volumes:
      - ${DECK_VOLUME_PATH}:/mnt/deck/
    networks:
      - kong-net

networks:
  postgres-net:
    driver: bridge
  kong-net:
    driver: bridge
    external: true

volumes:
  postgres:
  pgadmin:
